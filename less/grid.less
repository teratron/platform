/******************************************************************************
  Grid
  -----------------------------------------------------------------------------
  grid / grid-[1...8]
  fluids - элементы в данном контейнере имеют одну и туже ширину (до 100)
  fluid / fluid-[1...100] - ширина в %, номер означает сколько элементов поместиться в родительсом контейнере
  glob = glob-1
  glob-[1...100] - ширина в vw, тоже что и fluid-[1...100]
  -----------------------------------------------------------------------------
   1     2     3     4     5     6     7      8      9     10     11     12
  240   360   480   600   720   840   960   1080   1200   1320   1440   1560
 ******************************************************************************/
body, main, header, footer,
.inner,
.fluid, .fluid-1,
.fluids > :only-child,
.fluids > :first-child:nth-last-child(1) {
    width: 100%;
}
[class*="grid"],
.fluid, .fluid-1,
.fluids > :only-child,
.fluids > :first-child:nth-last-child(1) {
    min-width: 100%;
}
.fluid, .fluid-1,
.fluids > :only-child,
.fluids > :first-child:nth-last-child(1) {
    max-width: 100%;
}
.glob, .glob-1 {
    width:     100vw;
    min-width: 100vw;
    max-width: 100vw;
}
@media only screen and (min-width: 0) {
    .grid > * {
        width: 100%;
    }
    .grid-toggle-zero(8);
    .grid-toggle-zero(@n, @i: 1) when (@i =< @n) {
        .grid-@{i} > * {
            width: round(100%/@i, 4);
        }
        .grid-toggle-zero(@n, (@i + 1));
    }
}
.generate-grid(12);
.generate-grid(@n, @i: 1) when (@i =< @n) {
    @media only screen and (min-width: (120px + @i*120px)) {
        .grid > * {
            width: round(100%/(@i + 1), 4);
        }
    }
    .generate-grid(@n, (@i + 1));
}
.grid-toggle(8);
.grid-toggle(@n, @i: 1) when (@i =< @n) {
    .generate-grid-toggle(6*@i);
    .generate-grid-toggle(@k, @j: 1) when (@j =< @k) {
        @media only screen and (min-width: round((360px + @j*360px/@i))) {
            .grid-@{i} > * {
                width: round(100%/(@i + @j), 4);
            }
        }
        .generate-grid-toggle(@k, (@j + 1));
    }
    .grid-toggle(@n, (@i + 1));
}

/***************************************
  Fluid Grid
 ***************************************/
.generate-fluid(100);
.generate-fluid(@n, @i: 2) when (@i =< @n) {
    .fluid-@{i},
    .fluids > :first-child:nth-last-child(@{i}),
    .fluids > :first-child:nth-last-child(@{i}) ~ * {
        width:     round(100%/@i, 4);
        min-width: round(100%/@i, 4);
        max-width: round(100%/@i, 4);
    }
    .glob-@{i} {
        width:     round(100vw/@i, 4);
        min-width: round(100vw/@i, 4);
        max-width: round(100vw/@i, 4);
    }
    .generate-fluid(@n, (@i + 1));
}