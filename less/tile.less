/******************************************************************************
  Tile
  -----------------------------------------------------------------------------
  til / til_[1...8]
  flus - элементы в данном контейнере имеют одну и туже ширину (до 100)
  flu = flu_1 / flu_[1...100] - ширина в %, номер означает сколько элементов поместиться в родительсом контейнере
  -----------------------------------------------------------------------------
   1     2     3     4     5     6     7      8      9     10     11     12
  240   360   480   600   720   840   960   1080   1200   1320   1440   1560
 ******************************************************************************/
body, main, header, footer,
.@{inner},
.@{fluid}, .@{fluid}_1,
.@{fluid}@{child} > :only-child,
.@{fluid}@{child} > :first-child:nth-last-child(1) {
    width:      100%;
    flex-basis: 100%;
}
[class*="@{brick}"],
.@{fluid}, .@{fluid}_1,
.@{fluid}@{child} > :only-child,
.@{fluid}@{child} > :first-child:nth-last-child(1) {
    min-width: 100%;
}
.@{fluid}, .@{fluid}_1,
.@{fluid}@{child} > :only-child,
.@{fluid}@{child} > :first-child:nth-last-child(1) {
    max-width: 100%;
}
@media only screen and (min-width: 0) {
    .@{brick} > * {
        width:      100%;
        flex-basis: 100%;
    }
    .brick-toggle-zero(8);
    .brick-toggle-zero(@n, @i: 1) when (@i =< @n) {
        .@{brick}_@{i} > * {
            width:      round(100%/@i, 3);
            flex-basis: round(100%/@i, 3);
        }
        .brick-toggle-zero(@n, (@i + 1));
    }
}
.generate-brick(12);
.generate-brick(@n, @i: 1) when (@i =< @n) {
    @media only screen and (min-width: (120px + @i*120px)) {
        .@{brick} > * {
            width:      round(100%/(@i + 1), 3);
            flex-basis: round(100%/(@i + 1), 3);
        }
    }
    .generate-brick(@n, (@i + 1));
}
.brick-toggle(8);
.brick-toggle(@n, @i: 1) when (@i =< @n) {
    .generate-brick-toggle(6*@i);
    .generate-brick-toggle(@k, @j: 1) when (@j =< @k) {
        @media only screen and (min-width: round((360px + @j*360px/@i))) {
            .@{brick}_@{i} > * {
                width:      round(100%/(@i + @j), 3);
                flex-basis: round(100%/(@i + @j), 3);
            }
        }
        .generate-brick-toggle(@k, (@j + 1));
    }
    .brick-toggle(@n, (@i + 1));
}

/***************************************
  Fluid Grid
 ***************************************/
.generate-fluid(100);
.generate-fluid(@n, @i: 2) when (@i =< @n) {
    .@{fluid}_@{i},
    .@{fluid}@{child} > :first-child:nth-last-child(@{i}),
    .@{fluid}@{child} > :first-child:nth-last-child(@{i}) ~ * {
        width:      round(100%/@i, 3);
        flex-basis: round(100%/@i, 3);
    }
    .generate-fluid(@n, (@i + 1));
}